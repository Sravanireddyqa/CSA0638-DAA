#include <stdio.h>
#include <limits.h>
#define MAX_KEYS 10
int sum(int freq[], int i, int j) {
    int s = 0;
    for (int k = i; k <= j; k++)
        s += freq[k];
    return s;
}
int optCost(int keys[], int freq[], int i, int j) {
    // Base cases
    if (j < i) 
        return 0;
    if (j == i) 
        return freq[i];
    int minCost = INT_MAX;
    for (int r = i; r <= j; r++) {
        int cost = optCost(keys, freq, i, r - 1) + optCost(keys, freq, r + 1, j) + sum(freq, i, j);
        if (cost < minCost)
            minCost = cost;
    }
    return minCost;
}
int optimalSearchTree(int keys[], int freq[], int n) {
    return optCost(keys, freq, 0, n - 1);
}

int main() {
    int keys[MAX_KEYS] = {10, 12, 20};
    int freq[MAX_KEYS] = {34, 8, 50};
    int n = sizeof(keys) / sizeof(keys[0]);
    printf("Cost of optimal binary search tree is %d\n", optimalSearchTree(keys, freq, n));
    return 0;
}
Output:
int keys[MAX_KEYS] = {10, 12, 20};
int freq[MAX_KEYS] = {34, 8, 50};
Cost of optimal binary search tree is 142

